@page "/actores"
@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject SweetAlertService swal


<h3>Índice de actores</h3>

<div class="mb-3">
    <a href="actores/crear" class="btn btn-info">Crear Actores</a>
</div>

<Paginacion PaginaActual="paginaActual"
            PaginaSeleccionada="PaginaSeleccionada"
            PaginasTotales="paginasTotales"></Paginacion>

<ListadoGenerico Listado="Actores">
    <HayRegistrosCompletos>
        <table class="table table-stripped">
            <thead>
                <tr>
                    <th></th>
                    <th>Nombre</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Actores)
                {
                    <tr>
                        <td>
                            <a class="btn btn-success" href="/actores/editar/@item.Id">Editar</a>
                            <button type="button" class="btn btn-danger" @onclick=@(() => Borrar(item))>Eliminar</button>
                        </td>
                        <td>
                            @item.Nombre
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </HayRegistrosCompletos>
</ListadoGenerico>

@code {
    //Necesitamos la lista de los generos
    public List<Actores> Actores { get; set; }
    private int paginaActual = 1;
    private int paginasTotales;


    //Necesitamos una carga asyncrona inmediata en la cual obtenemos el listado de generos llamando al method get del repositorio.
    protected override async Task OnInitializedAsync()
    {
        await Cargar();
    }

    //Evento para seleccionar la pagina
    private async Task PaginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await Cargar(pagina);
    }
    private async Task Cargar(int pagina = 1)
    {
        var respuestaHTTP = await repositorio.Get<List<Actores>>($"api/actores?pagina={pagina}");
        Actores = respuestaHTTP.Response!;
        paginasTotales = int.Parse(respuestaHTTP.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault()!);
    }

    private async Task Borrar(Actores actores)
    {
        var ResponseHTTP = await repositorio.Delete($"api/actores/{actores.Id}");

        if (ResponseHTTP is null)
        {
            if (ResponseHTTP!.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await ResponseHTTP.ObtenerMensajeError();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Cargar();
        }
    }
}

